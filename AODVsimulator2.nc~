#include "Timer.h"
#include "AODVsimulator.h"
 
 
/**
 * @author Federico Oldani, Valentina Ionata
 * @date   May 10 2018
 */

module AODVsimulator @safe() {
  uses {
    interface Boot;
    interface Receive as ReceiveRRP;
    interface Receive as ReceiveRREQ;
    interface Receive as ReceiveDATA;
    interface AMSend as SendRRP;
    interface AMSend as SendRREQ;
    interface AMSend as SendDATA;
    interface Timer<TMilli> as MilliTimer;
    interface Timer<TMilli> as AcceptReply;
    interface SplitControl as AMControl;
    interface Packet;
    interface Random;

  }
}
implementation {

  message_t rreq_packet;
  message_t data_packet;
  message_t rrp_packet;

  uint8_t retries = NUM_RETRIES;
  
  routing_table_t routingTable[N];//number of nodes
  
  cache_table_t cacheTable[256];
  bool locked=FALSE;
  
  uint16_t msg_id=0;
  uint16_t msg_dest;
  uint16_t content;
  
  bool found;
  
  int i=0,k=0,hop=0;
  bool duplicated;
  
   event void Boot.booted() {
    dbg("ActiveNode", "ActiveNode: node %u started\n",TOS_NODE_ID);
    for(i=0;i<N;i++){
	  routingTable[i].dest= 0;
      routingTable[i].next_hop=0;
      routingTable[i].num_hop=0;
  	}
    for(i=0;i<N;i++){
	  cacheTable[i].dest=0;
      cacheTable[i].id=0;
      cacheTable[i].src=0;
  	}
    hop=0;
        
    call AMControl.start();
  }

  
  /////////////////////////////// Start /////////////////////////////////
  
 event void AMControl.startDone(error_t err) {
    if (err == SUCCESS)
      call MilliTimer.startPeriodic(30000); //every 30 sec, a data msg is sent
    else 
      call AMControl.start();
  }

  event void AMControl.stopDone(error_t err) {
    // do nothing
  }
  
  /////////////////////////////// function send ///////////////////////////////////
  
  void sendDatatMsg(uint16_t dest, uint16_t src, uint16_t msg_content, uint16_t next_hop){
    	data_msg_t* data=(data_msg_t*)(call Packet.getPayload(&data_packet,sizeof(data_msg_t)));

    	data->dest = dest;
    	data->content = msg_content;
    	data->src = src;
    	
    	if(call  SendRREQ.send(next_hop, &packetRREQ, sizeof(rreq_msg_t)) == SUCCESS) {
          dbg("AODVsimulator", "AODVsimulator: route request sent in broadcast.\n");	
          locked = TRUE; 
  }
  }
  
     void sendRReplyMsg(uint16_t id, uint16_t next_hop, uint16_t dest,uint16_t src,uint16_t sender, uint16_t hop){ 
     rrp_msg_t* rdm = (rrp_msg_t*)call Packet.getPayload(&rrp_packet, sizeof(rrp_msg_t));
        if (rdm == NULL)  
          return;
        rdm->id=id;
        rdm->dest=dest;
        rdm->hop=hop;
        rdm->sender=sender;
        rdm->src=src;
        if(call SendRRP.send(next_hop, &rrp_packet, sizeof(rrp_msg_t)) == SUCCESS) {
          dbg("AODVsimulator", "AODVsimulator: reply back to the previous hop %hhu. at time %s \n",next_hop, sim_time_string());	
          locked = TRUE;
        }        
    }
  
  
  
  /////////////////////////////// task sendData ///////////////////////////////////
  
  task void sendData(){
     msg_id++;
       
     msg_dest=TOS_NODE_ID;
     while(msg_dest==TOS_NODE_ID){
            msg_dest = (call Random.rand16() % N)+1; //random destination
        }
      content = call Random.rand16() % 150;//random content
      
    found=FALSE;
        for(i=0; i<N && !found; i++){
            if( routingTable[i].dest == msg_dest ){
                sendDatatMsg(msg_dest,TOS_NODE_ID,content,routingTable[i].next_hop);
                found = TRUE;
            }
        }
  }
  
  
  /////////////////////////////// TimerFired /////////////////////////////////
  event void MilliTimer.fired() {
        
        post sendData();        
        call AcceptReply.startOneShot(1000);
  }
  
  ////////////////////////////// AcceptReply /////////////////////////////////
  event void AcceptReply.fired() { //TODO
  
  }
  
  
  task void forwardRREQ(){
    duplicated=FALSE;
	    for(i=0;i<256;i++){
		if(cacheTable[i].id==rreq->id && cacheTable[i].src==rreq->src && cacheTable[i].dest==rreq->dest){
		    dbg("AODVsimulator","duplicate id:%hhu src:%hhu dest:%hhu \n",rreq->id,rreq->src,rreq->dest);
		    duplicated=TRUE;}
	    }
	    if(!duplicated){
    		k++;
    		if(k>255) k=0;
    		cacheTable[k].id=rreq->id;
    		cacheTable[k].src=rreq->src;
    		cacheTable[k].sender=rreq->sender;
        	cacheTable[k].dest=rreq->dest;		
		    //printCT();                           
		    dbg("AODVsimulator","send in broadcast the request\n");             
		    sendRReqMsg(rreq->id,rreq->src,rreq->dest);		                             		 
 	    }
  }
  
  ////////////////////////////// REQUEST /////////////////////////////////
  event message_t* ReceiveRREQ.receive(message_t* bufPtr, void* payload, uint8_t len) {
  
   if (len != sizeof(rreq_msg_t)) {
    dbg("AODVsimulator","Error length\n");
    return bufPtr;
    }
    
   rreq_msg_t* rreq = (rreq_msg_t*)payload;
   if(rreq->dest==TOS_NODE_ID){
        dbg("AODVsimulator","rreq found the dest! sending back rreply\n"); 
        sendRReplyMsg(rreq->id,rreq->sender,rreq->src,TOS_NODE_ID,TOS_NODE_ID,1);
  }
   else if(rreq->src!=TOS_NODE_ID){
   
        duplicated=FALSE;
	    for(i=0 ;i<256 && !duplicated; i++){
		if(cacheTable[i].id==rreq->id && cacheTable[i].src==rreq->src && cacheTable[i].dest==rreq->dest){
		    dbg("AODVsimulator","duplicate id:%hhu src:%hhu dest:%hhu \n",rreq->id,rreq->src,rreq->dest);
		    duplicated=TRUE;}
	    }
	    
	    if(!duplicated){
    		k++;
    		if(k>255) k=0;
    		cacheTable[k].id=rreq->id;
    		cacheTable[k].src=rreq->src;
    		cacheTable[k].sender=rreq->sender;
        	cacheTable[k].dest=rreq->dest;		
		    //printCT();                           
		    dbg("AODVsimulator","send in broadcast the request\n");             
		    sendRReqMsg(rreq->id,rreq->src,rreq->dest);		                             		 
 	    }

    }
   
     return bufPtr; 
  }
  
    ////////////////////////////// DATA /////////////////////////////////
  
  event message_t* ReceiveDATA.receive(message_t* bufPtr, void* payload, uint8_t len) {
    if (len != sizeof(data_msg_t)) {    dbg("AODVsimulator","Error length\n");return bufPtr;}
    
    data_msg_t* data = (data_msg_t*)payload;
    
    if(data->dest!=TOS_NODE_ID){
            found=FALSE;
            
            for(i=0;i<N && !found;i++){
               if(routingTable[i].dest==data->dest) {
                found=TRUE;             
                printRT();
                dbg("AODVsimulator","data packet forwarded from %hhu to next_hop %hhu [rt[i]=%hhu,data->dest=%hhu]\n",TOS_NODE_ID,routingTable[i].next_hop,routingTable[i].dest,data->dest);                 
                sendDatatMsg(data->dest, data->src, data->content, routingTable[i].next_hop);
                }
            }
      }

      if(!found){            
            dbg("AODVsimulator","Error, data pck stops here\n");               
            }
      else
      dbg("AODVsimulator","FINISH data packet from %hhu to %hhu received\n",data->src,data->dest);
      
  return bufPtr;
  }
  
    ////////////////////////////// REPLY /////////////////////////////////
  
  event message_t* ReceiveRRP.receive(message_t* bufPtr, void* payload, uint8_t len) {
    if (len != sizeof(rrp_msg_t)) {    dbg("AODVsimulator","Error length\n"); return bufPtr;}
 
    rrp_msg_t* rreply = (rrp_msg_t*)payload;
    dbg("AODVsimulator","RReply received!hop: %hhu\n",rreply->hop);
             
    found=FALSE;
    
    //TODO qui c'Ã¨ qualcosa da sistemare di sicuro
    for(i=0; routingTable[i].dest!=0 && !found && i<N; i++){
         if(routingTable[i].dest == rreply->src){
             if(routingTable[i].num_hop > rreply->hop || routingTable[i].num_hop==0) {
                    routingTable[i].next_hop = rreply->sender;
                    routingTable[i].num_hop = rreply->hop;
                   }
                found=TRUE;
	      }
	}
    if(!found && i<N){
                    routingTable[i].dest=rreply->src;
                    routingTable[i].next_hop=rreply->sender;
                    routingTable[i].num_hop=rreply->hop;
        
    }
    
      //send reply
    for(i=0 ;i<256; i++){
		if(cacheTable[i].src==rrp->dest && cacheTable[i].dest==rrp->src){
		    dbg("AODVsimulator","forward rreply id:%hhu src:%hhu dest:%hhu \n",rrp->id,rrp->src,rrp->dest);
		    
		    sendRReplyMsg(rrp->id,cacheTable[i].sender,rrp->dest,rrp->src, TOS_NODE_ID, rrp->hop+1);
		    }
		else {
   		    dbg("AODVsimulator","Backward path not found\n");
		    printCT();
	    }
	    }
      
  return bufPtr;
  }
  
  
  
  
  
  
  
  
event void SendRRP.sendDone(message_t* bufPtr, error_t error) {
  if (&rrp_packet == bufPtr) {
    locked = FALSE;
    dbg("AODVsimulator", "unlocked\n");
  }
}
event void SendRREQ.sendDone(message_t* bufPtr, error_t error) {
  if (&rreq_packet == bufPtr) {
    locked = FALSE;
    dbg("AODVsimulator", "unlocked\n");
  }
  }
  event void SendDATA.sendDone(message_t* bufPtr, error_t error) {
  if (&data_packet == bufPtr) {
    locked = FALSE;
    dbg("AODVsimulator", "unlocked\n");
  }}


    
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
